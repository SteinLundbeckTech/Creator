@use "sass:map" as map;
@use "sass:string" as str;
@use "sass:list" as list;
@use "..//Shared//Media" as media;
@use "..//Shared//Functions" as func;

$prefix: "grid";
$baseCols: 4;
$mediaCols: 12;
$iBase: 1;
$iMedia: 1;

$gaps: (
    None: null,
    SM: 6px,
    MD: 10px,
    LG: 16px,
    XL: 22px,
    XXL: 36px
);

$justifys: (
    Start,
    End,
    Center,
    Stretch
);

$aligns: (
    Stretch,
    Start,
    End,
    Center,
    Baseline
);

@function styleName($inline: false, $justify: false, $align: false) {
    $result: #{$prefix}-#{$iBase}-#{$iMedia};

    @if ($justify !=false) {
        $result: #{$result}-#{$justify};
    }

    @if ($align !=false) {
        $result: #{$result}-#{$align};
    }

    @if ($inline !=false) {
        $result: #{$result}-inline;
    }

    @return func.lower($result);
}

@mixin style($col, $inline: false, $justify: false, $align: false) {
    @if ($justify != false) {
        justify-content: #{func.lower($justify)};
    }

    @if ($align != false) {
        align-items: #{func.lower($align)};
    }

    @if ($inline == false) {
        display: grid;
    }
    @else {
        display: inline-grid;
    }

    @if ($col == 1) {
        grid-template-columns: $col;
    }
    @else {
        grid-template-columns: repeat($col, 1fr);
    }
}

.#{$prefix} {
    display: grid;
}

.#{$prefix}-#{'inline'} {
    display: inline-grid;
}

@while ($iMedia <= $mediaCols) {
    .#{styleName()} {
        @include style($iBase);
    }

    @each $just in $justifys {
        .#{styleName(false, $just)} {
            @include style($iBase, false, $just);
        }

        @each $align in $aligns {
            .#{styleName(false, $just, $align)} {
                @include style($iBase, false, $just, $align);
            }   
        }
    }

    @each $just in $justifys {
        .#{styleName(true, $just)} {
            @include style($iBase, false, $just);
        }

        @each $align in $aligns {
            .#{styleName(true, $just, $align)} {
                @include style($iBase, true, $just, $align);
            }   
        }
    }

    @include media.media() {
        @each $just in $justifys {
            .#{styleName(false, $just)} {
                @include style($iMedia, false, $just);
            }

            @each $align in $aligns {
                .#{styleName(false, $just, $align)} {
                    @include style($iMedia, false, $just, $align);
                }   
            }
        }

        @each $just in $justifys {
            .#{styleName(true, $just)} {
                @include style($iMedia, false, $just);
            }

            @each $align in $aligns {
                .#{styleName(true, $just, $align)} {
                    @include style($iMedia, true, $just, $align);
                }   
            }
        }
    }

    @if ($iBase < $baseCols) {
        $iBase: $iBase + 1;
    }

    $iMedia: $iMedia + 1;
}

@each $gapName, $gap in $gaps {
    @if ($gapName != None) {
        .gap-#{func.lower($gapName)} {
            grid-gap: $gap;
        }
    }
}
