@use "sass:map" as map;
@use "sass:string" as str;
@use "sass:meta" as meta;

$devices: ( Phone: XS, Tablet: SM, Laptop: MD, Computer: LG, Screen: XL );
$breakpoints: ( XS: 0px, SM: 576px, MD: 768px, LG: 992px, XL: 1200px );
$orientations: ( 0: Any, 1: Portrait, 2: Landscape );
$retinas: ( 1.25: 120dpi, 1.3: 124.8dpi, 1.5: 144dpi, 2: 192dpi );

@mixin media($size: MD, $orientation: Any, $mode: Up, $minWidth: null, $maxWidth: null) {
    $mode: str.to-upper-case(meta.inspect($mode));
    $size: str.to-upper-case(meta.inspect($size));
    $width: map.get($breakpoints, $size);
    $query: null;

    @if ($minWidth) {
        $width: $minWidth;
    }

    @if ($mode == UP) {
        $query: "(min-width: " + $width + ")";
    }
    @else if ($mode == DOWN) {
        $query: "(max-width: " + $width + ")";
    }
    @else if ($mode == ONLY) {
        $query: "(min-width: " + $width + ")";
        $max: null;

        @if ($maxWidth) {
            $max: $maxWidth;
        }
        @else {
            @if ($size == XS) {
                $max: map.get($breakpoints, SM);
            }
            @else if ($size == SM) {
                $max: map.get($breakpoints, MD);
            }
            @else if ($size == MD) {
                $max: map.get($breakpoints, LG);
            }
            @else if ($size == LG) {
                $max: map.get($breakpoints, XL);
            }
        }

        @if ($max) {
            $query: $query + " and (max-width: " + $max + ")";
        }
    }

    @if not ($orientation == Any) {
        $query: $query + " and (orientation: " + str.to-lower-case(meta.inspect($orientation)) + ")";
    }

    @media #{$query} {
        @content;
    }
}

@mixin mediaDevice($device: Laptop, $orientation: Any, $mode: Up, $minWidth, $maxWidth) {
    @include media(map.get($devices, $device));
}
